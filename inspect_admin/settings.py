"""
Django settings for inspect_admin project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2^!!##^%z#3cd1wmn0*g9o4b*wphgmq4xm725$!##6wqd=s2lj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

APPEND_SLASH = False

DEFAULT_CHARSET = 'utf-8'

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'index.apps.IndexConfig',
    'django_apscheduler',
    'corsheaders'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'index.middleware.TokenAuthenticationMiddleware.TokenAuthenticationMiddleware',
]

ROOT_URLCONF = 'inspect_admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inspect_admin.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # Django的引擎，还可以用Oracle等
        'NAME': 'inspect_test',  # 数据库名
        'USER': 'root',  # 用户名
        'PASSWORD': 'sykj_2022',  # 密码
        'HOST': '192.168.1.146',  # 数据库服务器地址
        'PORT': 3306,  # 端口号（MySQL默认3306）
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

TIME_ZONE = 'Asia/Shanghai'

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 指定调度器类
SCHEDULER_API_ENABLED = True

# 加密解密密码
PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
)

# 跨域配置
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ()
# 对应的发送的请求的跨域
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)


# 日志配置
LOGGING = {
    "version": 1,
    "formatters": {
        "simple": {
            "format": '[%(asctime)s] [%(levelname)s] [%(filename)s:%(lineno)d] %(message)s'
        },
        "standard": {
            "format": '%(asctime)s: %(levelname)s: %(filename)s: %(lineno)d: %(message)s'
        }
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "simple"
        },
        "file-info": {
            "class": "logging.handlers.RotatingFileHandler",  # 修改为RotatingFileHandler
            "formatter": "simple",
            "filename": "info.log",
            "encoding": "utf-8",
            "maxBytes": 1024*30*1024,  # 日志文件大小30M
            'backupCount': 5    # 超过五个文件从第一个开始覆盖
        },
        "file-error": {
            "class": "logging.handlers.RotatingFileHandler",  # 修改为RotatingFileHandler
            "formatter": "simple",
            "filename": "error.log",
            "encoding": "utf-8",
            "maxBytes": 1024*30*1024,  # 日志文件大小30M
            "backupCount": 5    # 超过五个文件从第一个开始覆盖
        }
    },
    "loggers": {
        "simple": {
            "level": "INFO",
            "handlers": ["console","file-info"],
            "propagate": True
        },
        "error": {
            "level": "ERROR",
            "handlers": ["console", "file-error"],
            "propagate": True
        },
        'django': {
            'handlers': ["file-error","console"],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.request': {
            'handlers': ["file-error","console"],
            'level': 'ERROR',
            'propagate': False,
        }
    }
}

# 自定义配置

# 邮箱配置
sender_email = "lufeixiang@seewintech.com"
sender_password = "2000919Lfx"

JWT_SECRET = 'abc123'  # 替换为一个用于签名 JWT 的密钥
JWT_ALGORITHM = 'HS256'  # 使用的 JWT 算法
JWT_EXPIRATION_HOURS = 3  # Token 过期时间（小时）

#巡检间隔时间，单位是s
inspect_interval_time = 10
#http请求超时时间，单位是s
request_timeout = 6
#http请求失败后重新请求次数
request_max_retries = 2
#死循环等待请求成功的最大时间,单位是s
while_max_time = 9

#不巡检时间段的开始时间
# 09:00   09:30
not_inspect_start_timeRange = ""
not_inspect_end_timeRange = ""